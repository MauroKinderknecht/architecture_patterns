// Package handlers provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package handlers

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// CreateItemRequest defines model for CreateItemRequest.
type CreateItemRequest struct {
	// Name Name of the item
	Name string `json:"name"`

	// Price Price of the item
	Price *float32 `json:"price,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Message Error message
	Message string `json:"message"`
}

// Item defines model for Item.
type Item struct {
	// Id Unique identifier of the item
	Id string `json:"id"`

	// Name Name of the item
	Name string `json:"name"`

	// Price Price of the item
	Price *float32 `json:"price,omitempty"`
}

// UpdateItemRequest defines model for UpdateItemRequest.
type UpdateItemRequest struct {
	// Name Name of the item
	Name string `json:"name"`

	// Price Price of the item
	Price *float32 `json:"price,omitempty"`
}

// CreateItemJSONRequestBody defines body for CreateItem for application/json ContentType.
type CreateItemJSONRequestBody = CreateItemRequest

// UpdateItemJSONRequestBody defines body for UpdateItem for application/json ContentType.
type UpdateItemJSONRequestBody = UpdateItemRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all items
	// (GET /items)
	ListItems(ctx echo.Context) error
	// Create a new item
	// (POST /items)
	CreateItem(ctx echo.Context) error
	// Delete an item
	// (DELETE /items/{itemId})
	DeleteItem(ctx echo.Context, itemId string) error
	// Get a single item
	// (GET /items/{itemId})
	GetItem(ctx echo.Context, itemId string) error
	// Update an existing item
	// (PUT /items/{itemId})
	UpdateItem(ctx echo.Context, itemId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListItems converts echo context to params.
func (w *ServerInterfaceWrapper) ListItems(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListItems(ctx)
	return err
}

// CreateItem converts echo context to params.
func (w *ServerInterfaceWrapper) CreateItem(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateItem(ctx)
	return err
}

// DeleteItem converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteItem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "itemId" -------------
	var itemId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "itemId", runtime.ParamLocationPath, ctx.Param("itemId"), &itemId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter itemId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteItem(ctx, itemId)
	return err
}

// GetItem converts echo context to params.
func (w *ServerInterfaceWrapper) GetItem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "itemId" -------------
	var itemId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "itemId", runtime.ParamLocationPath, ctx.Param("itemId"), &itemId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter itemId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetItem(ctx, itemId)
	return err
}

// UpdateItem converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateItem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "itemId" -------------
	var itemId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "itemId", runtime.ParamLocationPath, ctx.Param("itemId"), &itemId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter itemId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateItem(ctx, itemId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/items", wrapper.ListItems)
	router.POST(baseURL+"/items", wrapper.CreateItem)
	router.DELETE(baseURL+"/items/:itemId", wrapper.DeleteItem)
	router.GET(baseURL+"/items/:itemId", wrapper.GetItem)
	router.PUT(baseURL+"/items/:itemId", wrapper.UpdateItem)

}

type ListItemsRequestObject struct {
}

type ListItemsResponseObject interface {
	VisitListItemsResponse(w http.ResponseWriter) error
}

type ListItems200JSONResponse []Item

func (response ListItems200JSONResponse) VisitListItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListItems401JSONResponse ErrorResponse

func (response ListItems401JSONResponse) VisitListItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ListItems500JSONResponse ErrorResponse

func (response ListItems500JSONResponse) VisitListItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateItemRequestObject struct {
	Body *CreateItemJSONRequestBody
}

type CreateItemResponseObject interface {
	VisitCreateItemResponse(w http.ResponseWriter) error
}

type CreateItem201JSONResponse Item

func (response CreateItem201JSONResponse) VisitCreateItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateItem400JSONResponse ErrorResponse

func (response CreateItem400JSONResponse) VisitCreateItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateItem401JSONResponse ErrorResponse

func (response CreateItem401JSONResponse) VisitCreateItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateItem500JSONResponse ErrorResponse

func (response CreateItem500JSONResponse) VisitCreateItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteItemRequestObject struct {
	ItemId string `json:"itemId"`
}

type DeleteItemResponseObject interface {
	VisitDeleteItemResponse(w http.ResponseWriter) error
}

type DeleteItem204Response struct {
}

func (response DeleteItem204Response) VisitDeleteItemResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteItem401JSONResponse ErrorResponse

func (response DeleteItem401JSONResponse) VisitDeleteItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteItem404JSONResponse ErrorResponse

func (response DeleteItem404JSONResponse) VisitDeleteItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteItem500JSONResponse ErrorResponse

func (response DeleteItem500JSONResponse) VisitDeleteItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetItemRequestObject struct {
	ItemId string `json:"itemId"`
}

type GetItemResponseObject interface {
	VisitGetItemResponse(w http.ResponseWriter) error
}

type GetItem200JSONResponse Item

func (response GetItem200JSONResponse) VisitGetItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetItem401JSONResponse ErrorResponse

func (response GetItem401JSONResponse) VisitGetItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetItem404JSONResponse ErrorResponse

func (response GetItem404JSONResponse) VisitGetItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetItem500JSONResponse ErrorResponse

func (response GetItem500JSONResponse) VisitGetItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateItemRequestObject struct {
	ItemId string `json:"itemId"`
	Body   *UpdateItemJSONRequestBody
}

type UpdateItemResponseObject interface {
	VisitUpdateItemResponse(w http.ResponseWriter) error
}

type UpdateItem200JSONResponse Item

func (response UpdateItem200JSONResponse) VisitUpdateItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateItem400JSONResponse ErrorResponse

func (response UpdateItem400JSONResponse) VisitUpdateItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateItem401JSONResponse ErrorResponse

func (response UpdateItem401JSONResponse) VisitUpdateItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdateItem404JSONResponse ErrorResponse

func (response UpdateItem404JSONResponse) VisitUpdateItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateItem500JSONResponse ErrorResponse

func (response UpdateItem500JSONResponse) VisitUpdateItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List all items
	// (GET /items)
	ListItems(ctx context.Context, request ListItemsRequestObject) (ListItemsResponseObject, error)
	// Create a new item
	// (POST /items)
	CreateItem(ctx context.Context, request CreateItemRequestObject) (CreateItemResponseObject, error)
	// Delete an item
	// (DELETE /items/{itemId})
	DeleteItem(ctx context.Context, request DeleteItemRequestObject) (DeleteItemResponseObject, error)
	// Get a single item
	// (GET /items/{itemId})
	GetItem(ctx context.Context, request GetItemRequestObject) (GetItemResponseObject, error)
	// Update an existing item
	// (PUT /items/{itemId})
	UpdateItem(ctx context.Context, request UpdateItemRequestObject) (UpdateItemResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// ListItems operation middleware
func (sh *strictHandler) ListItems(ctx echo.Context) error {
	var request ListItemsRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListItems(ctx.Request().Context(), request.(ListItemsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListItems")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ListItemsResponseObject); ok {
		return validResponse.VisitListItemsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateItem operation middleware
func (sh *strictHandler) CreateItem(ctx echo.Context) error {
	var request CreateItemRequestObject

	var body CreateItemJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateItem(ctx.Request().Context(), request.(CreateItemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateItem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateItemResponseObject); ok {
		return validResponse.VisitCreateItemResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteItem operation middleware
func (sh *strictHandler) DeleteItem(ctx echo.Context, itemId string) error {
	var request DeleteItemRequestObject

	request.ItemId = itemId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteItem(ctx.Request().Context(), request.(DeleteItemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteItem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteItemResponseObject); ok {
		return validResponse.VisitDeleteItemResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetItem operation middleware
func (sh *strictHandler) GetItem(ctx echo.Context, itemId string) error {
	var request GetItemRequestObject

	request.ItemId = itemId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetItem(ctx.Request().Context(), request.(GetItemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetItem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetItemResponseObject); ok {
		return validResponse.VisitGetItemResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateItem operation middleware
func (sh *strictHandler) UpdateItem(ctx echo.Context, itemId string) error {
	var request UpdateItemRequestObject

	request.ItemId = itemId

	var body UpdateItemJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateItem(ctx.Request().Context(), request.(UpdateItemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateItem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdateItemResponseObject); ok {
		return validResponse.VisitUpdateItemResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+yX30/bMBDH/xXrtseIhI1JKG8wNlQJIQTjCfFgkmtr5F/Yl25dlf99st0ftMl+oDGo",
	"pj6lcs65u+99fL7OoDLKGo2aPJQz8NUYFY8/PzrkhANCdYkPDXoKi9YZi44ERhPNFYZnjb5ywpIwGko4",
	"5wqZGTIaIxOECjKgqUUowZMTegRtBtaJqmfrRVje2Ds0TnGCEobScFp9TDfqDh20bQYOHxrhsIbyJsV0",
	"u7Qyd/dYUXD5yTnjLtFboz12c1HoPR/1xBT3scXrTi4b7hd2fREELbuORd31ea3FQ4NM1KhJDAW63+m5",
	"jZUQNWQ/L8e1rf8jvIKZ0EMTfJIgGd5dCWUlsqOLAWQwQedTEPt7xV4RgjQWNbcCSngflzKwnMYx8zwE",
	"F3+NMAoTZOEhi0ENJZwJT4NoEYJLREfrd0URHpXRhDpu5NZKUcWt+b0PASwOeWRv4eatwyGU8CZftYN8",
	"3gvyiG27TJk7x6cp43V1j5gUnoK86bNtBgfF/pPi+VUY6+e3x/+15g2NjRPfsQ7OPzxRjL9yPtCETnPJ",
	"rtBN0LG4IdLjG6W4m87LxriUK32s8T3lXXVeSPChp2NTT58tm25rb9c5J9dg22Hr+WqZkOqq+GWMrIrB",
	"1el8RoZesIzHvGZLTXb8rvObsGGcafw6L0+bzXtVPguPQd2mriuRsAv2SVyfg2254woJnYfyZtYDwuBk",
	"o1WL8Cb0yMW9UkJyCpvsZo9k2byvbztcH/RcMoYtdH9tDA5SfC/j/NwQ+2wavZ0AJn4Y18vm0Hs9niJt",
	"HWPFP++dJ0hcyNA4dZpphNGM35mGHgu2Q3k7UD5FYpx5oUcSl8WxTQ/Nq0H5tYF+/kGk+yfgjwaR4kUG",
	"kSYGtxtEdsd2dWwTsKGh4jfhSejRYhAKZnFf38k8MxWXrMYJSmMVamLJFjJonIQSxkS2zHMZ7MbGU3lY",
	"HBY5tyKf7EN72/4IAAD//xMNg4aoEQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
